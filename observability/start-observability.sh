#!/bin/bash

# Observability Stack Startup Script for Enterprise AI Agent Framework
# This script helps deploy the observability stack with proper configuration

set -e

echo "üöÄ Starting Enterprise AI Agent Framework Observability Stack"
echo "=============================================================="

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running. Please start Docker and try again."
    exit 1
fi

# Check if Docker Compose is available
if ! command -v docker-compose > /dev/null 2>&1; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose and try again."
    exit 1
fi

# Create observability network if it doesn't exist
echo "üì° Creating observability network..."
docker network create observability-network 2>/dev/null || echo "Network already exists"

# Start the observability stack
echo "üìä Starting observability stack (Prometheus, Grafana, Jaeger, etc.)..."
docker-compose -f observability/docker-compose.observability.yml up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to start..."
sleep 10

# Check service health
echo "üîç Checking service health..."
services=("prometheus" "grafana" "jaeger" "elasticsearch" "kibana" "fluentd" "alertmanager")
for service in "${services[@]}"; do
    if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
        echo "‚úÖ $service is running"
    else
        echo "‚ùå $service is not running"
    fi
done

# Ask if user wants to start additional services
echo ""
read -p "ü§î Do you want to start Redis, PostgreSQL, and Kafka with their exporters? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üóÑÔ∏è Starting additional services..."
    docker-compose -f observability/docker-compose.services.yml up -d
    
    # Wait for additional services
    sleep 5
    
    # Check additional service health
    additional_services=("redis" "postgres" "kafka" "zookeeper" "redis-exporter" "postgres-exporter" "kafka-exporter")
    for service in "${additional_services[@]}"; do
        if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
            echo "‚úÖ $service is running"
        else
            echo "‚ùå $service is not running"
        fi
    done
fi

echo ""
echo "üéâ Observability Stack Deployment Complete!"
echo "=========================================="
echo ""
echo "üìä Access your dashboards:"
echo "  ‚Ä¢ Grafana:      http://localhost:3000 (admin/admin)"
echo "  ‚Ä¢ Prometheus:   http://localhost:9090"
echo "  ‚Ä¢ Jaeger:       http://localhost:16686"
echo "  ‚Ä¢ Kibana:       http://localhost:5601"
echo "  ‚Ä¢ Alertmanager: http://localhost:9093"
echo ""
echo "üîß Service endpoints:"
echo "  ‚Ä¢ Elasticsearch: http://localhost:9200"
echo "  ‚Ä¢ Fluentd:       http://localhost:24224"
echo "  ‚Ä¢ Node Exporter: http://localhost:9100/metrics"
echo "  ‚Ä¢ cAdvisor:      http://localhost:8080/metrics"
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "üóÑÔ∏è Additional service endpoints:"
    echo "  ‚Ä¢ Redis:           redis://localhost:6379"
    echo "  ‚Ä¢ PostgreSQL:      postgresql://postgres:password@localhost:5432/agent_framework"
    echo "  ‚Ä¢ Kafka:           localhost:9092"
    echo "  ‚Ä¢ Redis Exporter:  http://localhost:9121/metrics"
    echo "  ‚Ä¢ Postgres Exporter: http://localhost:9187/metrics"
    echo "  ‚Ä¢ Kafka Exporter:  http://localhost:9308/metrics"
    echo ""
fi

echo "üìã Next steps:"
echo "  1. Import Grafana dashboard from observability/grafana_dashboard.json"
echo "  2. Configure Prometheus data source in Grafana (http://prometheus:9090)"
echo "  3. Run the demo: python examples/observability_demo.py"
echo "  4. Run tests: pytest tests/observability/test_observability.py"
echo ""
echo "üõë To stop the stack:"
echo "  docker-compose -f observability/docker-compose.observability.yml down"
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "  docker-compose -f observability/docker-compose.services.yml down"
fi
echo ""
echo "‚ú® Happy monitoring!"
